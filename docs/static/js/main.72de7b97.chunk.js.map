{"version":3,"sources":["components/ChatView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChatView","chatList","replyUpdated","useState","replyMessage","setReplyMessage","wrapper","useRef","useEffect","current","scrollTop","scrollHeight","className","ref","map","chatItem","isOwner","onClick","onMessageClickHandler","reply","message","id","App","useForm","register","handleSubmit","setValue","String","Math","random","setChatList","onSubmit","from","noValidate","autoComplete","TextField","name","type","fullWidth","inputRef","label","IconButton","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72de7b97.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { ChatMessage } from '../interfaces';\nimport './ChatView.scss';\n\nfunction ChatView({ chatList, replyUpdated }: any) {\n  const [replyMessage, setReplyMessage] = useState<ChatMessage | null>(null);\n  const wrapper = useRef<any | null>(null);\n\n  useEffect(() => {\n    setReplyMessage(null);\n    replyUpdated(null);\n    wrapper.current.scrollTop = wrapper.current.scrollHeight;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chatList]);\n\n  const onMessageClickHandler = (chatItem: any) => {\n    if (replyMessage && replyMessage === chatItem) {\n      setReplyMessage(null);\n      replyUpdated(null);\n    } else {\n      setReplyMessage(chatItem);\n      replyUpdated(chatItem);\n    }\n  };\n\n  return (\n    <section className=\"ChatView\" ref={wrapper}>\n      <div className=\"wrapper\">\n        {chatList.map((chatItem: any) => (\n          <div\n            className={`item ${chatItem.isOwner && 'owner'}`}\n            key={chatItem.id}\n            onClick={() => { onMessageClickHandler(chatItem) }}\n          >\n            {chatItem.reply ? <q>{chatItem.reply.message}</q> : null}\n            {chatItem.message}\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n\nexport default ChatView;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport ChatView from './components/ChatView';\nimport { useForm } from \"react-hook-form\";\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport MessageIcon from '@material-ui/icons/Message';\nimport { ChatMessage, ChatForm } from './interfaces';\n\nfunction App() {\n  const { register, handleSubmit, setValue } = useForm();\n  const [replyMessage, setReplyMessage] = useState<ChatMessage>();\n  const [chatList, setChatList] = useState<ChatMessage[]>([\n    {\n      id: String(Math.random()),\n      isOwner: false,\n      message: 'Hello'\n    },\n    {\n      id: String(Math.random()),\n      isOwner: false,\n      message: 'How are you doing?'\n    },\n    {\n      id: String(Math.random()),\n      isOwner: true,\n      message: 'Hello, i\\'m fine!',\n      reply: {\n        id: String(Math.random()),\n        isOwner: false,\n        message: 'How are you doing?'\n      },\n    },\n    {\n      id: String(Math.random()),\n      isOwner: true,\n      message: 'W8 a minute pls'\n    },\n    {\n      id: String(Math.random()),\n      isOwner: true,\n      message: 'I\\'m trying to find my task...'\n    },\n    {\n      id: String(Math.random()),\n      isOwner: false,\n      message: 'Ok',\n      reply: {\n        id: String(Math.random()),\n        isOwner: false,\n        message: 'W8a minute pls'\n      }\n    },\n    {\n      id: String(Math.random()),\n      isOwner: true,\n      message: 'Well I can\\'t do that right now ðŸ˜ž'\n    },\n    {\n      id: String(Math.random()),\n      isOwner: false,\n      message: 'Why? Can I help you with that?',\n      reply: {\n        id: String(Math.random()),\n        isOwner: true,\n        message: 'Well I can\\'t do that right now ðŸ˜ž'\n      }\n    },\n    {\n      id: String(Math.random()),\n      isOwner: true,\n      message: 'No, just let me 1 more day to try again when my bro will comeback',\n      reply: {\n        id: String(Math.random()),\n        isOwner: false,\n        message: 'Why? Can I help you with that?'\n      },\n    },\n    {\n      id: String(Math.random()),\n      isOwner: false,\n      message: 'Shure, I can w8 till next year ðŸ˜‚',\n      reply: {\n        id: String(Math.random()),\n        isOwner: true,\n        message: 'No, just let me 1 more day to try again when my bro will comeback'\n      }\n    }\n  ]);\n\n  const onSubmit = (from: ChatForm) => {\n    const chatItem: ChatMessage = {\n      id: String(Math.random()),\n      isOwner: true,\n      message: from.message,\n      reply: replyMessage\n    }\n\n    setChatList([...chatList, chatItem]);\n    setValue(\"message\", \"\");\n  };\n\n  const replyUpdated = (reply: any) => {\n    setReplyMessage(reply);\n  }\n\n  return (\n    <div className=\"App\">\n      <ChatView chatList={chatList} replyUpdated={replyUpdated} />\n\n      <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\n        {replyMessage ? <q>{replyMessage.message}</q> : null}\n        <TextField\n          className=\"input\"\n          name=\"message\"\n          type=\"text\"\n          fullWidth\n          inputRef={register}\n          label=\"Write message here...\" />\n        <IconButton color=\"primary\" type=\"submit\">\n          <MessageIcon />\n        </IconButton>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}